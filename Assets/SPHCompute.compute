//------------------------------------------------------------------------------
// SPH Compute Shader
//------------------------------------------------------------------------------
// This file implements a Smoothed Particle Hydrodynamics (SPH) fluid simulation 
// using compute shaders in Unity.
//------------------------------------------------------------------------------

// Kernel Declarations
#pragma kernel CS_Clear
#pragma kernel CS_ClearGrid
#pragma kernel CS_BuildGrid
#pragma kernel CS_DensityPressure
#pragma kernel CS_ForceXSPH
#pragma kernel CS_VvHalfStep
#pragma kernel CS_VvFullStep
#pragma kernel CS_BoundObs
#pragma kernel CS_VelocityDamping

// Constants
static const float PI = 3.14159265359;
static const float EPSILON = 1e-6;

//------------------------------------------------------------------------------
// Data Structures
//------------------------------------------------------------------------------
struct Particle
{
    float3 position;
    float3 velocity;
    float3 acceleration;
    float density;
    float pressure;
    float restDensity; // Per-particle rest density.
    float viscosity;   // Per-particle viscosity (supports multiphase fluids).
    float mass;        // Per-particle mass.
    float4 color;      // Per-particle color (for multiphase visualization).
};

RWStructuredBuffer<Particle> Particles;
RWStructuredBuffer<int> GridCounts;
RWStructuredBuffer<int> GridIndices;
RWStructuredBuffer<int> CollisionCounter; // Collision counter buffer.

//------------------------------------------------------------------------------
// Simulation Parameters (set from C#)
//------------------------------------------------------------------------------
cbuffer SimulationParams
{
    int _ParticleCount;
    float _DeltaTime;

    float _ParticleMass; // Kept for backward compatibility.
    float _RestDensity;  // Global rest density (used for initialization).
    float _SoundSpeed;
    float _Gamma;

    float _SmoothingRadius;
    float _Gravity;
    float _SurfaceTensionCoefficient;
    float _SurfaceTensionThreshold; // Surface tension activation threshold.
    float _XSPHEpsilon;
    float _ParticleCollisionDamping;
    float _ObstacleRepulsionStiffness;
    float _ObstacleRadius;
    float3 _BoundsCenter;
    float3 _BoundsSize;
    float3 _SpawnCenter;
    float3 _SpawnSize;
    float3 _ObstaclePos;

    int _GridResolutionX;
    int _GridResolutionY;
    int _GridResolutionZ;
    int _MaxParticlesPerCell;
    float _CellSize;
    float3 _MinBound;

    float4x4 _BoundaryMatrix;
    float4x4 _BoundaryInvMatrix;
    float3 _BoundaryHalfExtents;
}

//------------------------------------------------------------------------------
// KERNEL: CS_Clear
// Resets per-particle acceleration, density, and pressure.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_Clear(uint3 id : SV_DispatchThreadID)
{
    int idx = (int)id.x;
    if (idx >= _ParticleCount) return;

    Particle p = Particles[idx];
    p.acceleration = 0.0;
    p.density = p.restDensity; // Reset density to rest density.
    p.pressure = 0.0;
    Particles[idx] = p;
}

//------------------------------------------------------------------------------
// KERNEL: CS_ClearGrid
// Clears the grid by resetting particle counts in each cell.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_ClearGrid(uint3 id : SV_DispatchThreadID)
{
    int cellIndex = (int)id.x;
    int totalCells = _GridResolutionX * _GridResolutionY * _GridResolutionZ;
    if (cellIndex >= totalCells) return;
    GridCounts[cellIndex] = 0;
}

//------------------------------------------------------------------------------
// KERNEL: CS_BuildGrid
// Computes the grid cell index for each particle and records its index in the grid.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_BuildGrid(uint3 id : SV_DispatchThreadID)
{
    int idx = (int)id.x;
    if (idx >= _ParticleCount) return;

    Particle p = Particles[idx];
    float3 pos = p.position;
    int3 cellCoord = int3(floor((pos - _MinBound) / _CellSize));
    cellCoord = clamp(cellCoord, int3(0, 0, 0), int3(_GridResolutionX - 1, _GridResolutionY - 1, _GridResolutionZ - 1));
    int cellIndex = cellCoord.x + cellCoord.y * _GridResolutionX + cellCoord.z * _GridResolutionX * _GridResolutionY;

    int count;
    InterlockedAdd(GridCounts[cellIndex], 1, count);
    if (count < _MaxParticlesPerCell)
    {
        int offset = cellIndex * _MaxParticlesPerCell + count;
        GridIndices[offset] = idx;
    }
}

//------------------------------------------------------------------------------
// KERNEL: CS_DensityPressure
// Computes density and pressure for each particle using a poly6 kernel.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_DensityPressure(uint3 id : SV_DispatchThreadID)
{
    int idx = (int)id.x;
    if (idx >= _ParticleCount) return;

    Particle self = Particles[idx];
    float h = _SmoothingRadius;
    float h2 = h * h;
    float poly6 = 315.0f / (64.0f * PI * pow(h, 9));
    float density = 0.0f;

    float3 pos = self.position;
    int3 cell = int3(floor((pos - _MinBound) / _CellSize));

    // Loop over neighboring cells.
    for (int z = cell.z - 1; z <= cell.z + 1; z++)
    {
        if (z < 0 || z >= _GridResolutionZ) continue;
        for (int y = cell.y - 1; y <= cell.y + 1; y++)
        {
            if (y < 0 || y >= _GridResolutionY) continue;
            for (int x = cell.x - 1; x <= cell.x + 1; x++)
            {
                if (x < 0 || x >= _GridResolutionX) continue;
                int neighborCellIndex = x + y * _GridResolutionX + z * _GridResolutionX * _GridResolutionY;
                int neighborCount = GridCounts[neighborCellIndex];
                int baseIndex = neighborCellIndex * _MaxParticlesPerCell;
                for (int k = 0; k < neighborCount; k++)
                {
                    int j = GridIndices[baseIndex + k];
                    if (j == idx) continue;
                    Particle other = Particles[j];
                    float3 r = pos - other.position;
                    float rSq = dot(r, r);
                    if (rSq < h2)
                    {
                        float diff = h2 - rSq;
                        density += other.mass * poly6 * diff * diff * diff;
                    }
                }
            }
        }
    }
    density = max(density, self.restDensity);
    self.density = density;

    float localB = self.restDensity * (_SoundSpeed * _SoundSpeed) / _Gamma;
    self.pressure = localB * (pow(self.density / self.restDensity, _Gamma) - 1.0f);

    Particles[idx] = self;
}

//------------------------------------------------------------------------------
// KERNEL: CS_ForceXSPH
// Computes pressure, viscosity, surface tension forces and applies XSPH velocity correction.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_ForceXSPH(uint3 id : SV_DispatchThreadID)
{
    int idx = (int)id.x;
    if (idx >= _ParticleCount) return;

    Particle self = Particles[idx];
    float densitySelf = self.density;
    if (densitySelf < EPSILON)
    {
        Particles[idx] = self;
        return;
    }

    float h = _SmoothingRadius;
    float h2 = h * h;
    float spikyGradFactor = -45.0f / (PI * pow(h, 6));
    float poly6 = 315.0f / (64.0f * PI * pow(h, 9));

    // Initialize force, color field accumulators, and XSPH correction.
    float3 force = float3(0.0f, _Gravity * densitySelf, 0.0f);
    float3 colorGradient = float3(0.0f, 0.0f, 0.0f);
    float colorLaplacian = 0.0f;
    float3 velocityCorrection = float3(0.0f, 0.0f, 0.0f);
    float normFactor = 0.0f;

    float3 pos = self.position;
    int3 cell = int3(floor((pos - _MinBound) / _CellSize));

    // Loop over neighboring cells.
    for (int z = cell.z - 1; z <= cell.z + 1; z++)
    {
        if (z < 0 || z >= _GridResolutionZ) continue;
        for (int y = cell.y - 1; y <= cell.y + 1; y++)
        {
            if (y < 0 || y >= _GridResolutionY) continue;
            for (int x = cell.x - 1; x <= cell.x + 1; x++)
            {
                if (x < 0 || x >= _GridResolutionX) continue;
                int neighborCellIndex = x + y * _GridResolutionX + z * _GridResolutionX * _GridResolutionY;
                int neighborCount = GridCounts[neighborCellIndex];
                int baseIndex = neighborCellIndex * _MaxParticlesPerCell;
                for (int k = 0; k < neighborCount; k++)
                {
                    int j = GridIndices[baseIndex + k];
                    if (j == idx) continue;
                    Particle other = Particles[j];
                    float3 r = pos - other.position;
                    float rSq = dot(r, r);
                    if (rSq < h2)
                    {
                        float dist = sqrt(rSq) + EPSILON;
                        float3 dir = r / dist;
                        float diff = h2 - rSq;

                        // Pressure force.
                        float pressureTerm = (self.pressure / (self.density * self.density)) +
                            (other.pressure / (other.density * other.density));
                        float3 gradW = spikyGradFactor * diff * diff * dir;
                        force += -other.mass * pressureTerm * gradW;

                        // Viscosity force.
                        float3 dv = other.velocity - self.velocity;
                        float viscLapFactor = 45.0f / (PI * pow(h, 6));
                        float lapW_visc = viscLapFactor * (h - dist);
                        float avgViscosity = 0.5f * (self.viscosity + other.viscosity);
                        force += avgViscosity * other.mass * dv / other.density * lapW_visc;

                        // Surface tension: accumulate color field gradient and Laplacian.
                        colorGradient += other.mass * gradW / other.density;
                        float lapW = -(1890.0 / (64.0 * PI * pow(h, 9))) * (h2 - rSq) * (h2 - 5.0 * rSq);
                        colorLaplacian += other.mass * lapW / other.density;

                        // XSPH velocity correction.
                        float diff2 = h2 - rSq;
                        float W = poly6 * diff2 * diff2 * diff2;
                        float rho_ij = 0.5f * (self.density + other.density);
                        velocityCorrection += dv * W * (other.mass / rho_ij);
                        normFactor += W * (other.mass / rho_ij);
                    }
                }
            }
        }
    }

    // Surface tension force using curvature formulation.
    float gradMag = length(colorGradient);
    if (gradMag > _SurfaceTensionThreshold)
    {
        float curvature = colorLaplacian / (gradMag + EPSILON);
        float3 stForce = -_SurfaceTensionCoefficient * curvature * (colorGradient / gradMag);
        force += stForce;
    }

    self.acceleration = force / densitySelf;

    // Apply XSPH velocity correction.
    if (normFactor > EPSILON)
    {
        velocityCorrection *= (_XSPHEpsilon / normFactor);
        self.velocity += velocityCorrection;
    }

    Particles[idx] = self;
}

//------------------------------------------------------------------------------
// KERNEL: CS_VvHalfStep
// Performs a half-step update of velocity and position.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_VvHalfStep(uint3 id : SV_DispatchThreadID)
{
    int idx = (int)id.x;
    if (idx >= _ParticleCount) return;

    Particle p = Particles[idx];
    p.velocity += 0.5f * _DeltaTime * p.acceleration;
    p.position += p.velocity * _DeltaTime;
    Particles[idx] = p;
}

//------------------------------------------------------------------------------
// KERNEL: CS_VvFullStep
// Completes the velocity update using the second half-step.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_VvFullStep(uint3 id : SV_DispatchThreadID)
{
    int idx = (int)id.x;
    if (idx >= _ParticleCount) return;

    Particle p = Particles[idx];
    p.velocity += 0.5f * _DeltaTime * p.acceleration;
    Particles[idx] = p;
}

//------------------------------------------------------------------------------
// KERNEL: CS_BoundObs
// Handles collisions with simulation boundaries and obstacles.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_BoundObs(uint3 id : SV_DispatchThreadID)
{
    int idx = (int)id.x;
    if (idx >= _ParticleCount) return;

    Particle p = Particles[idx];

    // --- Boundary Handling ---
    if (length(_BoundaryHalfExtents) > 0.001f)
    {
        float4 localPos4 = mul(_BoundaryInvMatrix, float4(p.position, 1.0f));
        float3 localPos = localPos4.xyz;
        float3 E = float3(0.5f, 0.5f, 0.5f);
        float3 penetration = float3(0.0f, 0.0f, 0.0f);
        bool collided = false;

        if (localPos.x < -E.x)
        {
            penetration.x = -E.x - localPos.x;
            localPos.x = -E.x;
            collided = true;
        }
        else if (localPos.x > E.x)
        {
            penetration.x = localPos.x - E.x;
            localPos.x = E.x;
            collided = true;
        }
        if (localPos.y < -E.y)
        {
            penetration.y = -E.y - localPos.y;
            localPos.y = -E.y;
            collided = true;
        }
        else if (localPos.y > E.y)
        {
            penetration.y = localPos.y - E.y;
            localPos.y = E.y;
            collided = true;
        }
        if (localPos.z < -E.z)
        {
            penetration.z = -E.z - localPos.z;
            localPos.z = -E.z;
            collided = true;
        }
        else if (localPos.z > E.z)
        {
            penetration.z = localPos.z - E.z;
            localPos.z = E.z;
            collided = true;
        }

        if (collided)
        {
            float4 worldPos = mul(_BoundaryMatrix, float4(localPos, 1.0f));
            p.position = worldPos.xyz;

            float3 localNormal = float3(0.0f, 0.0f, 0.0f);
            if (penetration.x > 0.0f)
                localNormal.x = (localPos.x < 0.0f) ? -1.0f : 1.0f;
            if (penetration.y > 0.0f)
                localNormal.y = (localPos.y < 0.0f) ? -1.0f : 1.0f;
            if (penetration.z > 0.0f)
                localNormal.z = (localPos.z < 0.0f) ? -1.0f : 1.0f;
            localNormal = normalize(localNormal);

            float3 worldNormal = normalize(mul((float3x3)_BoundaryMatrix, localNormal));
            float restitutionFactor = 1.0f;
            float frictionFactor = 0.0f;
            float3 vNormal = dot(p.velocity, worldNormal) * worldNormal;
            float3 vTangent = p.velocity - vNormal;
            vNormal = -vNormal * restitutionFactor;
            vTangent *= (1.0f - frictionFactor);
            p.velocity = vNormal + vTangent;

            // Increment collision counter.
            InterlockedAdd(CollisionCounter[0], 1);
        }
    }
    else
    {
        float3 halfSize = _BoundsSize * 0.5f;
        float3 minBound = _BoundsCenter - halfSize;
        float3 maxBound = _BoundsCenter + halfSize;
        float velocityDamping = 0.9f;

        if (p.position.x < minBound.x)
        {
            p.position.x = minBound.x;
            if (p.velocity.x < 0)
                p.velocity.x = -p.velocity.x * velocityDamping;
        }
        else if (p.position.x > maxBound.x)
        {
            p.position.x = maxBound.x;
            if (p.velocity.x > 0)
                p.velocity.x = -p.velocity.x * velocityDamping;
        }
        if (p.position.y < minBound.y)
        {
            p.position.y = minBound.y;
            if (p.velocity.y < 0)
                p.velocity.y = -p.velocity.y * velocityDamping;
        }
        else if (p.position.y > maxBound.y)
        {
            p.position.y = maxBound.y;
            if (p.velocity.y > 0)
                p.velocity.y = -p.velocity.y * velocityDamping;
        }
        if (p.position.z < minBound.z)
        {
            p.position.z = minBound.z;
            if (p.velocity.z < 0)
                p.velocity.z = -p.velocity.z * velocityDamping;
        }
        else if (p.position.z > maxBound.z)
        {
            p.position.z = maxBound.z;
            if (p.velocity.z > 0)
                p.velocity.z = -p.velocity.z * velocityDamping;
        }
    }

    // --- Obstacle Collision ---
    if (_ObstacleRadius > 0.0f)
    {
        float3 toParticle = p.position - _ObstaclePos;
        float dist = length(toParticle);
        if (dist < _ObstacleRadius && dist > EPSILON)
        {
            float penetration = _ObstacleRadius - dist;
            float3 normal = toParticle / dist;
            p.position += normal * penetration;
            p.velocity = reflect(p.velocity, normal) * _ParticleCollisionDamping;
        }
        else if (dist <= EPSILON)
        {
            p.position += float3(0.0f, _ObstacleRadius + 0.01f, 0.0f);
            p.velocity = reflect(p.velocity, float3(0.0f, 1.0f, 0.0f)) * _ParticleCollisionDamping;
        }
    }

    Particles[idx] = p;
}

//------------------------------------------------------------------------------
// KERNEL: CS_VelocityDamping
// Applies a simple velocity damping to simulate drag.
//------------------------------------------------------------------------------
[numthreads(256, 1, 1)]
void CS_VelocityDamping(uint3 id : SV_DispatchThreadID)
{
    int idx = (int)id.x;
    if (idx >= _ParticleCount) return;

    Particle p = Particles[idx];
    float speed = length(p.velocity);
    if (speed < 0.2f)
    {
        p.velocity *= 0.98f;
    }
    else
    {
        p.velocity *= 0.999f;
    }
    Particles[idx] = p;
}
